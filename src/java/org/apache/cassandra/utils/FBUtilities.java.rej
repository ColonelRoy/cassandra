--- src/java/org/apache/cassandra/utils/FBUtilities.java	(revision 1060857)
+++ src/java/org/apache/cassandra/utils/FBUtilities.java	(revision )
@@ -19,6 +19,7 @@
 package org.apache.cassandra.utils;
 
 import java.io.*;
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.math.BigInteger;
@@ -37,8 +38,10 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Joiner;
+
+import org.apache.cassandra.cache.IdentityRowCacheFilter;
+import org.apache.cassandra.cache.RowCacheFilter;
 import org.apache.commons.collections.iterators.CollatingIterator;
-import org.apache.commons.lang.ArrayUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -490,7 +493,40 @@
             throw ex;
         }
     }
-
+    
+    
+    public static RowCacheFilter getRowCacheFilter(String filter, Map<String, ?> filterParams) throws ConfigurationException
+    {
+        Class<? extends RowCacheFilter> typeClass;
+        try
+        {
+            if (filter == null)
+            {
+                typeClass = IdentityRowCacheFilter.class;
+            }
+            else
+            {
+                String className = filter.contains(".") ? filter : "org.apache.cassandra.cache." + filter;
+                typeClass = FBUtilities.<RowCacheFilter>classForName(className, "row-filter");
+            }
+            Constructor<?>[] constructors = typeClass.getConstructors();
+            for (Constructor<?> constructor : constructors)
+            {
+                Class<?>[] parameterTypes = constructor.getParameterTypes();
+                if (parameterTypes.length == 1 && parameterTypes[0].isAssignableFrom(Map.class)) {
+                    return typeClass.getConstructor(Map.class).newInstance(filterParams);
+                }
+            }
+            return typeClass.getConstructor().newInstance();
+        }
+        catch (Exception e)
+        {
+            ConfigurationException ex = new ConfigurationException("Invalid RowCacheFilter: " + e.getMessage());
+            ex.initCause(e);
+            throw ex;
+        }
+    }
+
     /**
      * @return The Class for the given name.
      * @param classname Fully qualified classname.
